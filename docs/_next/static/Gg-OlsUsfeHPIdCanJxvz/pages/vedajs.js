(window.webpackJsonp=window.webpackJsonp||[]).push([["2bd8"],{N15L:function(n,a,e){"use strict";e.r(a);var s=e("q1tI"),t=e.n(s),d=e("/MKj"),r=e("SQ8s"),o=e("o2GN");a.default=Object(d.b)()(function(){return t.a.createElement(r.a,{path:"/vedajs",article:{en:Object(o.default)('---\ntitle: VEDA.js\n---\n<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n\n  <h1>VEDA.js</h1>\n  <i>Shader Art Framework for Web</i>\n\n  ![npm version](https://img.shields.io/npm/v/vedajs.svg) ![license MIT](https://img.shields.io/npm/l/vedajs.svg) [![hashtag #vedajs](https://img.shields.io/badge/hashtag-vedajs-blue.svg)](https://twitter.com/search?f=tweets&q=%23vedajs&src=typd)\n</div>\n\n\n## What is VEDA.js?\n\nVEDA.js is a JavaScript framework to run GLSL shaders on browsers.\nIt was originally created as a GLSL engine of [VEDA](https://atom.io/packages/veda), but we realized that it\'s useful to run shaders on browsers so published VEDA.js as a standalone library.\n\n\n## Install\n\nYou can install VEDA.js with `npm` or `yarn`.\n\n```bash\nnpm install vedajs\n```\n\n\n## Usage\n\n```js\nimport Veda from \'vedajs\';\n\nconst veda = new Veda();\n\nveda.setCanvas(canvas);\nveda.loadFragmentShader(code);\n\nveda.play();\n```\n\n\n## Advanced Usage\n\n### Fragment shader\n\n```js\nveda.loadFragmentShader(code);\n```\n\nThis is equivalent to\n\n```js\nveda.loadShader({ fs: code });\n```\n\n\n### Vertex shader\n\n```js\nveda.loadVertexShader(code);\n```\n\nThis is equivalent to\n\n```js\nveda.loadShader({ vs: code });\n```\n\n\n### Using both\n\nPass a shader object to `loadShader`.\n\n```js\nveda.loadShader({\n  vs: vertexShaderCode,\n  fs: fragmentShaderCode,\n});\n```\n\n\n### Multipass rendering\n\nVEDA.js supports multipass rendering.\nPass `loadShader` an array of shaders corresponding to each rendering pass.\n\n```js\nveda.loadShader([{\n  vs: vertexShaderFor1stPass,\n  fs: fragmentShaderFor1stPass\n}, {\n  fs: fragmentShaderFor2ndPass\n}]);\n```\n\n\n### Audio input\n\n```js\nveda.toggleAudio(true);\nveda.loadShader(shader);\n```\n\n\n### MIDI input\n\n```js\nveda.toggleMidi(true);\nveda.loadShader(shader);\n```\n\n\n### WebCam input\n\n```js\nveda.toggleCamera(true);\nveda.loadShader(shader);\n```\n\n\n## Keyboard input\n\n```js\nveda.toggleKeyboard(true);\nveda.loadShader(shader);\n```\n\n\n## Gamepad input\n\n```js\nveda.toggleGamepad(true);\nveda.loadShader(shader);\n```\n\n\n## Author\n\nTakayosi Amagi\n\n- Website: [gmork.in](https://gmork.in)\n- Twitter: [@amagitakayosi](https://twitter.com/amagitakayosi)\n- GitHub: [fand](https://github.com/fand)\n\n\n## LICENSE\n\nMIT\n'),ja:Object(o.default)('---\ntitle: VEDA.js\n---\n<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n\n  <h1>VEDA.js</h1>\n  <i>Shader Art Framework for Web</i>\n\n  ![npm version](https://img.shields.io/npm/v/vedajs.svg) ![license MIT](https://img.shields.io/npm/l/vedajs.svg) [![hashtag #vedajs](https://img.shields.io/badge/hashtag-vedajs-blue.svg)](https://twitter.com/search?f=tweets&q=%23vedajs&src=typd)\n</div>\n\n\n## What is VEDA.js?\n\nVEDA.jsは、Web上でシェーダーアートを実現するためのフレームワークです。\n元々はVEDAのGLSLエンジンとして開発されましたが、Web上でのシェーダー表現にも役に立つことがわかり、単独のnpmパッケージとして公開しました。\n\n\n## インストール\n\n`npm` または `yarn` でインストールできます。\n\n```bash\nnpm install vedajs\n```\n\n\n## 使い方\n\n```js\nimport Veda from \'vedajs\';\n\nconst veda = new Veda();\n\nveda.setCanvas(canvas);\nveda.loadFragmentShader(code);\n\nveda.play();\n```\n\n\n## 詳しい使い方\n\n### フラグメントシェーダー\n\n```js\nveda.loadFragmentShader(code);\n```\n\nloadFragmentShaderは以下のコードと等価です:\n\n```js\nveda.loadShader({ fs: code });\n```\n\n\n### 頂点シェーダー\n\n```js\nveda.loadVertexShader(code);\n```\n\nloadVertexShaderは以下のコードと等価です:\n\n```js\nveda.loadShader({ vs: code });\n```\n\n\n### 頂点シェーダーとフラグメントシェーダーを組み合わせる\n\n`loadShader` にシェーダーオブジェクトを渡してください。\n\n```js\nveda.loadShader({\n  vs: vertexShaderCode,\n  fs: fragmentShaderCode,\n});\n```\n\n\n### マルチパスレンダリング\n\nVEDA.jsはマルチパスレンダリングをサポートしています。\n`loadShader` に、各パスに対応するシェーダーオブジェクトの配列を渡してください。\n\n```js\nveda.loadShader([{\n  vs: vertexShaderFor1stPass,\n  fs: fragmentShaderFor1stPass\n}, {\n  fs: fragmentShaderFor2ndPass\n}]);\n```\n\n\n### 音声入力\n\n```js\nveda.toggleAudio(true);\nveda.loadShader(shader);\n```\n\n\n### MIDI入力\n\n```js\nveda.toggleMidi(true);\nveda.loadShader(shader);\n```\n\n\n### Webカメラ\n\n```js\nveda.toggleCamera(true);\nveda.loadShader(shader);\n```\n\n\n## キーボード入力\n\n```js\nveda.toggleKeyboard(true);\nveda.loadShader(shader);\n```\n\n\n## ゲームパッド入力\n\n```js\nveda.toggleGamepad(true);\nveda.loadShader(shader);\n```\n\n\n## 作者について\n\nTakayosi Amagiが開発しています。\n\n- Website: [gmork.in](https://gmork.in)\n- Twitter: [@amagitakayosi](https://twitter.com/amagitakayosi)\n- GitHub: [fand](https://github.com/fand)\n\n\n## ライセンス\n\nMIT\n')},shader:{attach:function(n){n.loadFragmentShader("// Author: @amagitakayosi\n// 2017-10-23\nprecision mediump float;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\n\n// Util functions copied from http://glslsandbox.com/e#43153.1\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\nfloat tri(in float x){return clamp(abs(fract(x)-.5),0.01,0.49);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat triNoise2d(in vec2 p, float spd)\n{\n  float z=1.8;\n  float z2=2.5;\n  float rz = 0.;\n  p *= mm2(p.x*0.06);\n  vec2 bp = p;\n  for (float i=0.; i<5.; i++ )\n  {\n    vec2 dg = tri2(bp*1.85)*.75;\n    dg *= mm2(time*spd);\n    p -= dg/z2;\n\n    bp *= 1.3;\n    z2 *= .45;\n    z *= .42;\n    p *= 1.21 + (rz-1.0)*.02;\n\n    rz += tri(p.x+tri(p.y))*z;\n    p*= -m2;\n  }\n  return clamp(1./pow(rz*29., 1.3),0.,.55);\n}\n\nvoid main() {\n  vec2 p = (gl_FragCoord.xy * 2. - resolution) / min(resolution.x, resolution.y);\n  float t = time * .3 + 100.;\n\n  p = p * .5 + 1.;\n  p.x += 2.;  // Noises are too weak around origin\n\n  p /= vec2(\n    triNoise2d(p, p.x*.002+t*.002),\n    triNoise2d(p, p.y*.002+t*.002)\n  ) * 20.;  // zoom factor\n\n  gl_FragColor = vec4(\n    0.8 * sin(p.x * 2.3 + 2.7),\n    0.8 * sin(p.y * 2.2 + 3.7),\n    .8,\n    1.0\n  ) * .6;\n}\n")}}})})},oC41:function(n,a,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/vedajs",function(){var n=e("N15L");return{page:n.default||n}}])}},[["oC41","31d6","1a40"]]]);