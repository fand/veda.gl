(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{351:function(n,t,e){__NEXT_REGISTER_PAGE("/",function(){return n.exports=e(352),{page:n.exports.default}})},352:function(n,t,e){"use strict";e.r(t);var a=e(0),o=e.n(a),r=e(2),s=e(3),i=e(1),l={attach:function(n){n.loadFragmentShader("// Author: @amagitakayosi\n// 2017-10-23\nprecision mediump float;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\n\n// Util functions copied from http://glslsandbox.com/e#43153.1\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\nfloat tri(in float x){return clamp(abs(fract(x)-.5),0.01,0.49);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat triNoise2d(in vec2 p, float spd)\n{\n  float z=1.8;\n  float z2=2.5;\n  float rz = 0.;\n  p *= mm2(p.x*0.06);\n  vec2 bp = p;\n  for (float i=0.; i<5.; i++ )\n  {\n    vec2 dg = tri2(bp*1.85)*.75;\n    dg *= mm2(time*spd);\n    p -= dg/z2;\n\n    bp *= 1.3;\n    z2 *= .45;\n    z *= .42;\n    p *= 1.21 + (rz-1.0)*.02;\n\n    rz += tri(p.x+tri(p.y))*z;\n    p*= -m2;\n  }\n  return clamp(1./pow(rz*29., 1.3),0.,.55);\n}\n\nvoid main() {\n  vec2 p = (gl_FragCoord.xy * 2. - resolution) / min(resolution.x, resolution.y);\n  float t = time * .3 + 100.;\n\n  p = p * .5 + 1.;\n  p.x += 2.;  // Noises are too weak around origin\n\n  p /= vec2(\n    triNoise2d(p, p.x*.002+t*.002),\n    triNoise2d(p, p.y*.002+t*.002)\n  ) * 20.;  // zoom factor\n\n  gl_FragColor = vec4(\n    0.8 * sin(p.x * 2.3 + 2.7),\n    0.8 * sin(p.y * 2.2 + 3.7),\n    .8,\n    1.0\n  ) * .6;\n}\n")}},p={en:Object(i.default)('<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n  <h1>VEDA</h1><i>VJ system on Atom</i>\n  <br/>\n</div>\n\n\n\x3c!-- ## Let your Atom blink. --\x3e\n\nVEDA is an Atom package for VJ / Livecoding with GLSL.\n\n![](https://user-images.githubusercontent.com/1403842/28673275-1d42b062-731d-11e7-92b0-bde5ca1f1cae.gif)\n\n\n### Easy GLSL runtime\n\nVEDA supports both fragment shaders and vertex shaders.\nIn fragment shaders, you can use uniform variables like <a target="\\_blank" href="http://glslsandbox.com/">GLSL Sandbox</a>.\nIn vertex shaders, you can use uniform variables like <a target="\\_blank" href="https://vertexshaderart.com/">vertexshaderart.com</a>.\n\n\n### Cross-platform by design\n\nVEDA is built on web technologies and provided as an Atom package.\nIt works on Windows, macOS, and Linux.\n\n\n### Auto-completion, Linters, ...\n\nBecause VEDA runs on Atom, you can write GLSL with your favorite settings, package, and snippets.\nAlso, VEDA automatically installs <a target="\\_blank" href="https://atom.io/packages/autocomplete-glsl">autocomplete-glsl</a> and <a target="\\_blank" href="https://atom.io/packages/autocomplete-glsl">linter-glsl</a> for rapid GLSL development.\n\n\n### Audio, MIDI, OSC, and more!\n\nVEDA supports a variety of inputs such as:\n\n- Audio\n- MIDI\n- OSC\n- WebCam\n- Gamepad\n- Keyboard\n- Mouse\n\n<br/>\n\n\x3c!-- ## VEDA.js\n\nVEDA.js is a GLSL framework for modern web development.\nIt was created as a part of VEDA, and published to npm later.\n\n[VEDA.js](/vedajs) --\x3e\n\n\n\x3c!-- ## LICENSE\n\nProjects around VEDA is licensed in **MIT** license.\nSo you can use them anywhere you want! --\x3e\n\n\n---\n\n\nIf you like it, please post to Twitter with hashtag `#VEDAJS`.\nWe\'ll be happy to see your tweets!😸\n\n<a href="https://twitter.com/intent/tweet?url=https://veda.gl/&hashtags=vedajs" target="\\_blank">Tweet with #VEDAJS</a>\n'),ja:Object(i.default)('<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n  <h1>VEDA</h1><i>VJ system on Atom</i>\n  <br/>\n</div>\n\n\n\x3c!-- ## Atom上で動作するVJシステム --\x3e\n\nVEDAは、AtomエディタでのVJやライブコーディングを可能にするパッケージです。\n\n![](https://user-images.githubusercontent.com/1403842/28673275-1d42b062-731d-11e7-92b0-bde5ca1f1cae.gif)\n\n\n### 使いやすいGLSL実行環境\n\nVEDAはフラグメントシェーダ、頂点シェーダどちらも対応しています。\nまた、<a target="\\_blank" href="http://glslsandbox.com/">GLSL Sandbox</a>や<a target="\\_blank" href="https://vertexshaderart.com/">vertexshaderart.com</a>といったGLSL環境と同じuniform変数が利用できます。\n\n\n### クロスプラットフォーム\n\nVEDAはWeb技術によって開発され、Atomのパッケージとして提供されています。\nそのため、Windows, macOS, Linuxのどのプラットフォームでも動作します。\n\n\n### 自動補完、linter、etc……\n\nユーザーは普段使っているAtomパッケージやスニペットを利用できます。\nまた、VEDAは <a target="\\_blank" href="https://atom.io/packages/autocomplete-glsl">autocomplete-glsl</a>、<a target="\\_blank" href="https://atom.io/packages/linter-glsl">linter-glsl</a>を自動でインストールし、快適なGLSLコーディング環境を実現します。\n\n\n### Audio, MIDI, OSC, and more!\n\nVEDAでは、様々なデータをGLSL内で利用できます。例えば:\n\n- 音声入力\n- MIDI入力\n- OSC\n- Webカメラ\n- ゲームパッド\n- キーボード入力\n- マウス位置\n\n\n\x3c!-- ## VEDA.js\n\nVEDA.jsは、ブラウザ上でGLSLを実行するためのフレームワークです。\n元々はVEDAのGLSLエンジンとして開発され、後にnpmパッケージとして公開されました。\n\n[VEDA.js](/vedajs) --\x3e\n\n\n\x3c!-- ## ライセンス\n\nVEDA、あるいは関連するライブラリは、全て **MIT** ライセンスで公開されています。\nつまり、どのプロジェクトでも制限なく利用できます！ --\x3e\n\n\n<hr/>\n\n\nVEDAを気に入っていただけたら、ぜひ[ハッシュタグ `#VEDAJS` でツイート](https://twitter.com/intent/tweet?url=https://veda.gl/&hashtags=vedajs)してください。\n皆さんのご意見・ご感想をお待ちしています！😸\n')};t.default=Object(r.b)()(function(){return o.a.createElement(s.a,{shader:l,article:p})})}},[[351,1,0]]]);