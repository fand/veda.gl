(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{bRl8:function(e,n,t){"use strict";t.r(n);var r=t("q1tI"),o=t.n(r),a=t("/MKj"),c=t("SQ8s"),i=t("o2GN");n.default=Object(a.b)()(function(){return o.a.createElement(c.a,{path:"/features/keyboard",article:{en:Object(i.default)('---\ntitle: Keyboard Input\n---\n# Keyboard Input\n\n<p class="pc-only">A fragment shader using keyboard inputs is running in this page.\n  Hit any key and see what\'s happening!\n\n</p>\n\n\nVEDA supports keyboard input.\nWhen you add `"keyboard": true` to [Settings](/settings), VEDA enables this uniform variable:\n\n- `sampler2D key`\n\nThe size of `sampler2D key` is `256x1`.\nThe state of key input is stored in x corresponding to the keycode.\n\nFor example, `texture2D(key, vec2(65. / 256.)).r` is `1.0` while key `a` (code: 65) is pressed.\n\nSee [examples](https://github.com/fand/veda/blob/master/examples/key.frag) for more detail.\n\n## Fullscreen Mode\n\nVEDA provides fullscreen mode for shaders which use keyboard inputs.\nWhen you run `Veda:Toggle Fullscreen` (`ctrl + escape`), VEDA hides all elements in the editor except for the shader canvas.\n(Run again to show the elements again)\nThen you can play with keyboard inputs without changing files.\n'),ja:Object(i.default)('---\ntitle: \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\n---\n# \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\n\n<p class="pc-only">\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3092\u7528\u3044\u305fGLSL\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n  \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u62bc\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01  \n</p>\n\nVEDA\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u306e\u72b6\u614b\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n[Settings](/settings?lang=ja)\u3067 `"keyboard": true` \u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306euniform\u5909\u6570\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n- `sampler2D key`\n\n`sampler2D key` \u306e\u30b5\u30a4\u30ba\u306f `256x1` \u3067\u3059\u3002\n\u30ad\u30fc\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308bx\u5ea7\u6a19\u306b\u3001\u305d\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u30ad\u30fc `a` (\u30ad\u30fc\u30b3\u30fc\u30c9: 65)\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u9593\u3001 `texture2D(key, vec2(65. / 256.)).r` \u306f `1.0` \u3068\u306a\u308a\u307e\u3059\u3002\n\n\u8a73\u3057\u304f\u306f [examples](https://github.com/fand/veda/blob/master/examples/key.frag) \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n## \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\n\n\u30ad\u30fc\u5165\u529b\u3092\u5229\u7528\u3057\u305f\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u306f\u3001VEDA\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u6a5f\u80fd\u304c\u4fbf\u5229\u3067\u3059\u3002\n`Veda:Toggle Fullscreen` (`ctrl + escape`) \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001VEDA\u306f\u30b7\u30a7\u30fc\u30c0\u30fc\u4ee5\u5916\u306e\u8981\u7d20\u3092\u975e\u8868\u793a\u306b\u3057\u307e\u3059\u3002\n\uff08\u3082\u3046\u4e00\u5ea6\u62bc\u3059\u3068\u975e\u8868\u793a\u304c\u89e3\u9664\u3055\u308c\u307e\u3059\uff09\n\u3053\u308c\u306b\u3088\u308a\u3001\u7de8\u96c6\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6c17\u306b\u3059\u308b\u3053\u3068\u306a\u304f\u30ad\u30fc\u5165\u529b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n')},shader:{attach:function(e){e.setFrameskip(2),e.toggleKeyboard(!0),e.loadTexture("font","/static/images/font.png"),e.loadFragmentShader('/*{\n  "keyboard": true,\n  "IMPORTED": {\n    "font": { "PATH": "./images/font.png" },\n  }\n}*/\nprecision mediump float;\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D key;\nuniform sampler2D font;\nuniform sampler2D backbuffer;\n\nfloat random(in vec2 p) {\n  return fract(sin(dot(p, vec2(5395.3242, 38249.2348))) * 248.24);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution;\n\n    vec2 uv2 = (uv - .5) * 2. + .5;\n    uv2 = clamp(uv2, 0., 1.);\n\n    // Background\n    gl_FragColor = vec4(\n      noise(uv * 2.23 + vec2(.7, 0) * sin(time * .39 + 1.)),\n      noise(uv * 2.27 + vec2(.8, 0) * sin(time * .37 + 3.)),\n      noise(uv * 2.21 + vec2(.9, 0) * sin(time * .49 + 8.)),\n      1.\n    ) * .05;\n\n    // Characters\n    float code = 0.;\n\n    if (texture2D(key, vec2(65. / 256.)).r > .0) { code = 65.; }\n    if (texture2D(key, vec2(66. / 256.)).r > .0) { code = 66.; }\n    if (texture2D(key, vec2(67. / 256.)).r > .0) { code = 67.; }\n    if (texture2D(key, vec2(68. / 256.)).r > .0) { code = 68.; }\n    if (texture2D(key, vec2(69. / 256.)).r > .0) { code = 69.; }\n    if (texture2D(key, vec2(70. / 256.)).r > .0) { code = 70.; }\n    if (texture2D(key, vec2(71. / 256.)).r > .0) { code = 71.; }\n    if (texture2D(key, vec2(72. / 256.)).r > .0) { code = 72.; }\n    if (texture2D(key, vec2(73. / 256.)).r > .0) { code = 73.; }\n    if (texture2D(key, vec2(74. / 256.)).r > .0) { code = 74.; }\n    if (texture2D(key, vec2(75. / 256.)).r > .0) { code = 75.; }\n    if (texture2D(key, vec2(76. / 256.)).r > .0) { code = 76.; }\n    if (texture2D(key, vec2(77. / 256.)).r > .0) { code = 77.; }\n    if (texture2D(key, vec2(78. / 256.)).r > .0) { code = 78.; }\n    if (texture2D(key, vec2(79. / 256.)).r > .0) { code = 79.; }\n    if (texture2D(key, vec2(80. / 256.)).r > .0) { code = 80.; }\n    if (texture2D(key, vec2(81. / 256.)).r > .0) { code = 81.; }\n    if (texture2D(key, vec2(82. / 256.)).r > .0) { code = 82.; }\n    if (texture2D(key, vec2(83. / 256.)).r > .0) { code = 83.; }\n    if (texture2D(key, vec2(84. / 256.)).r > .0) { code = 84.; }\n    if (texture2D(key, vec2(85. / 256.)).r > .0) { code = 85.; }\n    if (texture2D(key, vec2(86. / 256.)).r > .0) { code = 86.; }\n    if (texture2D(key, vec2(87. / 256.)).r > .0) { code = 87.; }\n    if (texture2D(key, vec2(88. / 256.)).r > .0) { code = 88.; }\n    if (texture2D(key, vec2(89. / 256.)).r > .0) { code = 89.; }\n\n    float x = mod(code, 16.) / 16.;\n    float y = 1. - ((floor(code / 16.) + 1.) / 16.);\n    gl_FragColor += vec4(texture2D(font, vec2(x, y) + uv2 / 16.).r) * clamp(code, 0., 1.) * noise(uv2 * 3. + time * 2.);\n\n    // Melting\n    gl_FragColor += vec4(\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 13. + time) * 2.)).r,\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 17. + time) * 2.)).g,\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 11. + time) * 2.)).b,\n      1.\n    ) * .96;\n}\n')},detach:function(e){e.toggleKeyboard(!1),e.unloadTexture("font","/static/images/font.png")}}})})},fps2:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/features/keyboard",function(){var e=t("bRl8");return{page:e.default||e}}])}},[["fps2",1,0]]]);