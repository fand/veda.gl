(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{N15L:function(n,a,e){"use strict";e.r(a);var s=e("q1tI"),t=e.n(s),d=e("/MKj"),r=e("SQ8s"),o=e("o2GN");a.default=Object(d.b)()(function(){return t.a.createElement(r.a,{path:"/vedajs",article:{en:Object(o.default)('---\ntitle: VEDA.js\n---\n<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n\n  <h1>VEDA.js</h1>\n  <i>Shader Art Framework for Web</i>\n\n  ![npm version](https://img.shields.io/npm/v/vedajs.svg) ![license MIT](https://img.shields.io/npm/l/vedajs.svg) [![hashtag #vedajs](https://img.shields.io/badge/hashtag-vedajs-blue.svg)](https://twitter.com/search?f=tweets&q=%23vedajs&src=typd)\n</div>\n\n\n## What is VEDA.js?\n\nVEDA.js is a JavaScript framework to run GLSL shaders on browsers.\nIt was originally created as a GLSL engine of [VEDA](https://atom.io/packages/veda), but we realized that it\'s useful to run shaders on browsers so published VEDA.js as a standalone library.\n\n\n## Install\n\nYou can install VEDA.js with `npm` or `yarn`.\n\n```bash\nnpm install vedajs\n```\n\n\n## Usage\n\n```js\nimport Veda from \'vedajs\';\n\nconst veda = new Veda();\n\nveda.setCanvas(canvas);\nveda.loadFragmentShader(code);\n\nveda.play();\n```\n\n\n## Advanced Usage\n\n### Fragment shader\n\n```js\nveda.loadFragmentShader(code);\n```\n\nThis is equivalent to\n\n```js\nveda.loadShader({ fs: code });\n```\n\n\n### Vertex shader\n\n```js\nveda.loadVertexShader(code);\n```\n\nThis is equivalent to\n\n```js\nveda.loadShader({ vs: code });\n```\n\n\n### Using both\n\nPass a shader object to `loadShader`.\n\n```js\nveda.loadShader({\n  vs: vertexShaderCode,\n  fs: fragmentShaderCode,\n});\n```\n\n\n### Multipass rendering\n\nVEDA.js supports multipass rendering.\nPass `loadShader` an array of shaders corresponding to each rendering pass.\n\n```js\nveda.loadShader([{\n  vs: vertexShaderFor1stPass,\n  fs: fragmentShaderFor1stPass\n}, {\n  fs: fragmentShaderFor2ndPass\n}]);\n```\n\n\n### Audio input\n\n```js\nveda.toggleAudio(true);\nveda.loadShader(shader);\n```\n\n\n### MIDI input\n\n```js\nveda.toggleMidi(true);\nveda.loadShader(shader);\n```\n\n\n### WebCam input\n\n```js\nveda.toggleCamera(true);\nveda.loadShader(shader);\n```\n\n\n## Keyboard input\n\n```js\nveda.toggleKeyboard(true);\nveda.loadShader(shader);\n```\n\n\n## Gamepad input\n\n```js\nveda.toggleGamepad(true);\nveda.loadShader(shader);\n```\n\n\n## Author\n\nTakayosi Amagi\n\n- Website: [gmork.in](https://gmork.in)\n- Twitter: [@amagitakayosi](https://twitter.com/amagitakayosi)\n- GitHub: [fand](https://github.com/fand)\n\n\n## LICENSE\n\nMIT\n'),ja:Object(o.default)('---\ntitle: VEDA.js\n---\n<div align="center">\n  <img alt="logo" src="/static/images/logo_720h.png" width="192"/>\n\n  <h1>VEDA.js</h1>\n  <i>Shader Art Framework for Web</i>\n\n  ![npm version](https://img.shields.io/npm/v/vedajs.svg) ![license MIT](https://img.shields.io/npm/l/vedajs.svg) [![hashtag #vedajs](https://img.shields.io/badge/hashtag-vedajs-blue.svg)](https://twitter.com/search?f=tweets&q=%23vedajs&src=typd)\n</div>\n\n\n## What is VEDA.js?\n\nVEDA.js\u306f\u3001Web\u4e0a\u3067\u30b7\u30a7\u30fc\u30c0\u30fc\u30a2\u30fc\u30c8\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u5143\u3005\u306fVEDA\u306eGLSL\u30a8\u30f3\u30b8\u30f3\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u304c\u3001Web\u4e0a\u3067\u306e\u30b7\u30a7\u30fc\u30c0\u30fc\u8868\u73fe\u306b\u3082\u5f79\u306b\u7acb\u3064\u3053\u3068\u304c\u308f\u304b\u308a\u3001\u5358\u72ec\u306enpm\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n`npm` \u307e\u305f\u306f `yarn` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```bash\nnpm install vedajs\n```\n\n\n## \u4f7f\u3044\u65b9\n\n```js\nimport Veda from \'vedajs\';\n\nconst veda = new Veda();\n\nveda.setCanvas(canvas);\nveda.loadFragmentShader(code);\n\nveda.play();\n```\n\n\n## \u8a73\u3057\u3044\u4f7f\u3044\u65b9\n\n### \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\n\n```js\nveda.loadFragmentShader(code);\n```\n\nloadFragmentShader\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u7b49\u4fa1\u3067\u3059:\n\n```js\nveda.loadShader({ fs: code });\n```\n\n\n### \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\n\n```js\nveda.loadVertexShader(code);\n```\n\nloadVertexShader\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u7b49\u4fa1\u3067\u3059:\n\n```js\nveda.loadShader({ vs: code });\n```\n\n\n### \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n\n`loadShader` \u306b\u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```js\nveda.loadShader({\n  vs: vertexShaderCode,\n  fs: fragmentShaderCode,\n});\n```\n\n\n### \u30de\u30eb\u30c1\u30d1\u30b9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\n\nVEDA.js\u306f\u30de\u30eb\u30c1\u30d1\u30b9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n`loadShader` \u306b\u3001\u5404\u30d1\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u914d\u5217\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```js\nveda.loadShader([{\n  vs: vertexShaderFor1stPass,\n  fs: fragmentShaderFor1stPass\n}, {\n  fs: fragmentShaderFor2ndPass\n}]);\n```\n\n\n### \u97f3\u58f0\u5165\u529b\n\n```js\nveda.toggleAudio(true);\nveda.loadShader(shader);\n```\n\n\n### MIDI\u5165\u529b\n\n```js\nveda.toggleMidi(true);\nveda.loadShader(shader);\n```\n\n\n### Web\u30ab\u30e1\u30e9\n\n```js\nveda.toggleCamera(true);\nveda.loadShader(shader);\n```\n\n\n## \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\n\n```js\nveda.toggleKeyboard(true);\nveda.loadShader(shader);\n```\n\n\n## \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u5165\u529b\n\n```js\nveda.toggleGamepad(true);\nveda.loadShader(shader);\n```\n\n\n## \u4f5c\u8005\u306b\u3064\u3044\u3066\n\nTakayosi Amagi\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002\n\n- Website: [gmork.in](https://gmork.in)\n- Twitter: [@amagitakayosi](https://twitter.com/amagitakayosi)\n- GitHub: [fand](https://github.com/fand)\n\n\n## \u30e9\u30a4\u30bb\u30f3\u30b9\n\nMIT\n')},shader:{attach:function(n){n.loadFragmentShader("// Author: @amagitakayosi\n// 2017-10-23\nprecision mediump float;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\n\n// Util functions copied from http://glslsandbox.com/e#43153.1\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\nfloat tri(in float x){return clamp(abs(fract(x)-.5),0.01,0.49);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat triNoise2d(in vec2 p, float spd)\n{\n  float z=1.8;\n  float z2=2.5;\n  float rz = 0.;\n  p *= mm2(p.x*0.06);\n  vec2 bp = p;\n  for (float i=0.; i<5.; i++ )\n  {\n    vec2 dg = tri2(bp*1.85)*.75;\n    dg *= mm2(time*spd);\n    p -= dg/z2;\n\n    bp *= 1.3;\n    z2 *= .45;\n    z *= .42;\n    p *= 1.21 + (rz-1.0)*.02;\n\n    rz += tri(p.x+tri(p.y))*z;\n    p*= -m2;\n  }\n  return clamp(1./pow(rz*29., 1.3),0.,.55);\n}\n\nvoid main() {\n  vec2 p = (gl_FragCoord.xy * 2. - resolution) / min(resolution.x, resolution.y);\n  float t = time * .3 + 100.;\n\n  p = p * .5 + 1.;\n  p.x += 2.;  // Noises are too weak around origin\n\n  p /= vec2(\n    triNoise2d(p, p.x*.002+t*.002),\n    triNoise2d(p, p.y*.002+t*.002)\n  ) * 20.;  // zoom factor\n\n  gl_FragColor = vec4(\n    0.8 * sin(p.x * 2.3 + 2.7),\n    0.8 * sin(p.y * 2.2 + 3.7),\n    .8,\n    1.0\n  ) * .6;\n}\n")}}})})},oC41:function(n,a,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/vedajs",function(){var n=e("N15L");return{page:n.default||n}}])}},[["oC41",1,0]]]);