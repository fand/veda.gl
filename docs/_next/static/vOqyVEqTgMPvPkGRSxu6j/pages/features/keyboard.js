(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{337:function(e,n,t){__NEXT_REGISTER_PAGE("/features/keyboard",function(){return e.exports=t(338),{page:e.exports.default}})},338:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(2),c=t(3),i=t(1);n.default=Object(a.b)()(function(){return o.a.createElement(c.a,{path:"/features/keyboard",article:{en:Object(i.default)('---\ntitle: Keyboard Input\n---\n# Keyboard Input\n\n<p class="pc-only">A fragment shader using keyboard inputs is running in this page.\n  Hit any key and see what\'s happening!\n\n</p>\n\n\nVEDA supports keyboard input.\nWhen you add `"keyboard": true` to [Settings](/settings), VEDA enables this uniform variable:\n\n- `sampler2D key`\n\nThe size of `sampler2D key` is `256x1`.\nThe state of key input is stored in x corresponding to the keycode.\n\nFor example, `texture2D(key, vec2(65. / 256.)).r` is `1.0` while key `a` (code: 65) is pressed.\n\nSee [examples](https://github.com/fand/veda/blob/master/examples/key.frag) for more detail.\n\n## Fullscreen Mode\n\nVEDA provides fullscreen mode for shaders which use keyboard inputs.\nWhen you run `Veda:Toggle Fullscreen` (`ctrl + escape`), VEDA hides all elements in the editor except for the shader canvas.\n(Run again to show the elements again)\nThen you can play with keyboard inputs without changing files.\n'),ja:Object(i.default)('---\ntitle: キーボード入力\n---\n# キーボード入力\n\n<p class="pc-only">このページでは、キーボード入力を用いたGLSLコードが実行されています。\n  キーボードを押してみてください！  \n</p>\n\nVEDAでは、キーボード入力の状態を利用できます。\n[Settings](/settings?lang=ja)で `"keyboard": true` すると、以下のuniform変数が利用できるようになります。\n\n- `sampler2D key`\n\n`sampler2D key` のサイズは `256x1` です。\nキーコードに対応するx座標に、そのキーが押されているかどうかの値が入っています。\n\n例えば、キー `a` (キーコード: 65)が押されている間、 `texture2D(key, vec2(65. / 256.)).r` は `1.0` となります。\n\n詳しくは [examples](https://github.com/fand/veda/blob/master/examples/key.frag) をご覧ください。\n\n## フルスクリーンモード\n\nキー入力を利用したシェーダーでは、VEDAのフルスクリーン機能が便利です。\n`Veda:Toggle Fullscreen` (`ctrl + escape`) を実行すると、VEDAはシェーダー以外の要素を非表示にします。\n（もう一度押すと非表示が解除されます）\nこれにより、編集中のファイルを気にすることなくキー入力できるようになります。\n')},shader:{attach:function(e){e.setFrameskip(2),e.toggleKeyboard(!0),e.loadTexture("font","/static/images/font.png"),e.loadFragmentShader('/*{\n  "keyboard": true,\n  "IMPORTED": {\n    "font": { "PATH": "./images/font.png" },\n  }\n}*/\nprecision mediump float;\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D key;\nuniform sampler2D font;\nuniform sampler2D backbuffer;\n\nfloat random(in vec2 p) {\n  return fract(sin(dot(p, vec2(5395.3242, 38249.2348))) * 248.24);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution;\n\n    vec2 uv2 = (uv - .5) * 2. + .5;\n    uv2 = clamp(uv2, 0., 1.);\n\n    // Background\n    gl_FragColor = vec4(\n      noise(uv * 2.23 + vec2(.7, 0) * sin(time * .39 + 1.)),\n      noise(uv * 2.27 + vec2(.8, 0) * sin(time * .37 + 3.)),\n      noise(uv * 2.21 + vec2(.9, 0) * sin(time * .49 + 8.)),\n      1.\n    ) * .05;\n\n    // Characters\n    float code = 0.;\n\n    if (texture2D(key, vec2(65. / 256.)).r > .0) { code = 65.; }\n    if (texture2D(key, vec2(66. / 256.)).r > .0) { code = 66.; }\n    if (texture2D(key, vec2(67. / 256.)).r > .0) { code = 67.; }\n    if (texture2D(key, vec2(68. / 256.)).r > .0) { code = 68.; }\n    if (texture2D(key, vec2(69. / 256.)).r > .0) { code = 69.; }\n    if (texture2D(key, vec2(70. / 256.)).r > .0) { code = 70.; }\n    if (texture2D(key, vec2(71. / 256.)).r > .0) { code = 71.; }\n    if (texture2D(key, vec2(72. / 256.)).r > .0) { code = 72.; }\n    if (texture2D(key, vec2(73. / 256.)).r > .0) { code = 73.; }\n    if (texture2D(key, vec2(74. / 256.)).r > .0) { code = 74.; }\n    if (texture2D(key, vec2(75. / 256.)).r > .0) { code = 75.; }\n    if (texture2D(key, vec2(76. / 256.)).r > .0) { code = 76.; }\n    if (texture2D(key, vec2(77. / 256.)).r > .0) { code = 77.; }\n    if (texture2D(key, vec2(78. / 256.)).r > .0) { code = 78.; }\n    if (texture2D(key, vec2(79. / 256.)).r > .0) { code = 79.; }\n    if (texture2D(key, vec2(80. / 256.)).r > .0) { code = 80.; }\n    if (texture2D(key, vec2(81. / 256.)).r > .0) { code = 81.; }\n    if (texture2D(key, vec2(82. / 256.)).r > .0) { code = 82.; }\n    if (texture2D(key, vec2(83. / 256.)).r > .0) { code = 83.; }\n    if (texture2D(key, vec2(84. / 256.)).r > .0) { code = 84.; }\n    if (texture2D(key, vec2(85. / 256.)).r > .0) { code = 85.; }\n    if (texture2D(key, vec2(86. / 256.)).r > .0) { code = 86.; }\n    if (texture2D(key, vec2(87. / 256.)).r > .0) { code = 87.; }\n    if (texture2D(key, vec2(88. / 256.)).r > .0) { code = 88.; }\n    if (texture2D(key, vec2(89. / 256.)).r > .0) { code = 89.; }\n\n    float x = mod(code, 16.) / 16.;\n    float y = 1. - ((floor(code / 16.) + 1.) / 16.);\n    gl_FragColor += vec4(texture2D(font, vec2(x, y) + uv2 / 16.).r) * clamp(code, 0., 1.) * noise(uv2 * 3. + time * 2.);\n\n    // Melting\n    gl_FragColor += vec4(\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 13. + time) * 2.)).r,\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 17. + time) * 2.)).g,\n      texture2D(backbuffer, uv + vec2(0, .001) * (1. + noise(uv * 11. + time) * 2.)).b,\n      1.\n    ) * .96;\n}\n')},detach:function(e){e.toggleKeyboard(!1),e.unloadTexture("font","/static/images/font.png")}}})})}},[[337,1,0]]]);