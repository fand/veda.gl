(window.webpackJsonp=window.webpackJsonp||[]).push([["a53b"],{KFYT:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/install",function(){var n=e("nKEB");return{page:n.default||n}}])},nKEB:function(n,t,e){"use strict";e.r(t);var i=e("q1tI"),s=e.n(i),a=e("/MKj"),o=e("SQ8s"),r=e("o2GN");t.default=Object(a.b)()(function(){return s.a.createElement(o.a,{path:"/install",article:{en:Object(r.default)('---\ntitle: Install VEDA\n---\n# Install VEDA\n\nLet your editor blink!\n\n![](https://user-images.githubusercontent.com/1403842/28673275-1d42b062-731d-11e7-92b0-bde5ca1f1cae.gif)\n\n<div align="center" style="line-height: 40px;">![GitHub stars](https://img.shields.io/github/stars/fand/veda.svg?style=social)\n![TravisCI](https://img.shields.io/travis/fand/veda.svg) ![license MIT](https://img.shields.io/apm/dm/veda.svg) ![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)\n</div>\n\n\n\n## 1. Install Prerequisites\n\nPython 2.x is required to build native add-ons in VEDA\'s dependency.\nCheck the version of your python with `python -V`.\n\nIf you\'ve already installed both Python 2 and 3, you have to tell npm to use python 2.\nRun `npm config set python python2`.\n\n\n## 2. Install VEDA\n\nThen install VEDA from Atom\'s `Settings` view or by `apm` like this:\n\n```bash\napm install vedajs\n```\n\n---\n\nNow VEDA is ready for you!\nRead [USAGE](/usage) to learn how to use it.\n'),ja:Object(r.default)('---\ntitle: VEDAのインストール\n---\n# VEDAのインストール\n\nAtomを光らせよう。\n\n![](https://user-images.githubusercontent.com/1403842/28673275-1d42b062-731d-11e7-92b0-bde5ca1f1cae.gif)\n\n<div align="center" style="line-height: 40px;">![GitHub stars](https://img.shields.io/github/stars/fand/veda.svg?style=social)\n![TravisCI](https://img.shields.io/travis/fand/veda.svg) ![license MIT](https://img.shields.io/apm/dm/veda.svg) ![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)\n</div>\n\n\n## 1. 事前準備\n\nVEDAはNode.jsのネイティブアドオンを利用するため、Python 2系をインストールする必要があります。\nターミナルで `python -V` を実行して、Pythonのバージョンを確認してください。\n\n既にPython2と3をインストール済みの場合、npmがPython2を参照するように設定します。\nターミナルから `npm config set python python2` を実行して下さい。\n\n\n## 2. VEDA本体のインストール\n\nVEDAをAtomの `Settings` タブか、`apm` からインストールできます。\n\n```bash\napm install vedajs\n```\n\n---\n\nこれでVEDAの準備ができました！\n次は [操作方法](/usage?lang=ja) のページでVEDAの基本的な使い方を覚えましょう。\n')},shader:{attach:function(n){n.loadFragmentShader("// Author: @amagitakayosi\n// 2017-10-23\nprecision mediump float;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\n\n// Util functions copied from http://glslsandbox.com/e#43153.1\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\nfloat tri(in float x){return clamp(abs(fract(x)-.5),0.01,0.49);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat triNoise2d(in vec2 p, float spd)\n{\n  float z=1.8;\n  float z2=2.5;\n  float rz = 0.;\n  p *= mm2(p.x*0.06);\n  vec2 bp = p;\n  for (float i=0.; i<5.; i++ )\n  {\n    vec2 dg = tri2(bp*1.85)*.75;\n    dg *= mm2(time*spd);\n    p -= dg/z2;\n\n    bp *= 1.3;\n    z2 *= .45;\n    z *= .42;\n    p *= 1.21 + (rz-1.0)*.02;\n\n    rz += tri(p.x+tri(p.y))*z;\n    p*= -m2;\n  }\n  return clamp(1./pow(rz*29., 1.3),0.,.55);\n}\n\nvoid main() {\n  vec2 p = (gl_FragCoord.xy * 2. - resolution) / min(resolution.x, resolution.y);\n  float t = time * .3 + 100.;\n\n  p = p * .5 + 1.;\n  p.x += 2.;  // Noises are too weak around origin\n\n  p /= vec2(\n    triNoise2d(p, p.x*.002+t*.002),\n    triNoise2d(p, p.y*.002+t*.002)\n  ) * 20.;  // zoom factor\n\n  gl_FragColor = vec4(\n    0.8 * sin(p.x * 2.3 + 2.7),\n    0.8 * sin(p.y * 2.2 + 3.7),\n    .8,\n    1.0\n  ) * .6;\n}\n")}}})})}},[["KFYT","31d6","1a40"]]]);