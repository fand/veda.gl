module.exports=__NEXT_REGISTER_PAGE("/features/keyboard",function(){var a=webpackJsonp([12],{314:function(a,b,c){a.exports=c(315)},315:function(a,b,c){"use strict";Object.defineProperty(b,"__esModule",{value:!0});var d=c(0),e=c.n(d),f=c(5),g=c(3),h=c(6);b["default"]=Object(h.a)(function(){return e.a.createElement(f.a,{path:"/features/keyboard",article:{en:Object(g["default"])("---\ntitle: Keyboard Input\n---\n# Keyboard Input\n\n<p class=\"pc-only\">A fragment shader using keyboard inputs is running in this page.\n  Hit any key and see what's happening!\n\n</p>\n\n\nVEDA supports keyboard input.\nWhen you add `\"keyboard\": true` to [Settings](/settings), VEDA enables this uniform variable:\n\n- `sampler2D key`\n\nThe size of `sampler2D key` is `256x1`.\nThe state of key input is stored in x corresponding to the keycode.\n\nFor example, `texture2D(key, vec2(65. / 256.)).r` is `1.0` while key `a` (code: 65) is pressed.\n\nSee [examples](https://github.com/fand/veda/blob/master/examples/key.frag) for more detail.\n"),ja:Object(g["default"])("---\ntitle: \u30AD\u30FC\u30DC\u30FC\u30C9\u5165\u529B\n---\n# \u30AD\u30FC\u30DC\u30FC\u30C9\u5165\u529B\n\n<p class=\"pc-only\">\u3053\u306E\u30DA\u30FC\u30B8\u3067\u306F\u3001\u30AD\u30FC\u30DC\u30FC\u30C9\u5165\u529B\u3092\u7528\u3044\u305FGLSL\u30B3\u30FC\u30C9\u304C\u5B9F\u884C\u3055\u308C\u3066\u3044\u307E\u3059\u3002\n  \u30AD\u30FC\u30DC\u30FC\u30C9\u3092\u62BC\u3057\u3066\u307F\u3066\u304F\u3060\u3055\u3044\uFF01  \n\n</p>\n\nVEDA\u3067\u306F\u3001\u30AD\u30FC\u30DC\u30FC\u30C9\u5165\u529B\u306E\u72B6\u614B\u3092\u5229\u7528\u3067\u304D\u307E\u3059\u3002\n[Settings](/settings?lang=ja)\u3067 `\"keyboard\": true` \u3059\u308B\u3068\u3001\u4EE5\u4E0B\u306Euniform\u5909\u6570\u304C\u5229\u7528\u3067\u304D\u308B\u3088\u3046\u306B\u306A\u308A\u307E\u3059\u3002\n\n- `sampler2D key`\n\n`sampler2D key` \u306E\u30B5\u30A4\u30BA\u306F `256x1` \u3067\u3059\u3002\n\u30AD\u30FC\u30B3\u30FC\u30C9\u306B\u5BFE\u5FDC\u3059\u308Bx\u5EA7\u6A19\u306B\u3001\u305D\u306E\u30AD\u30FC\u304C\u62BC\u3055\u308C\u3066\u3044\u308B\u304B\u3069\u3046\u304B\u306E\u5024\u304C\u5165\u3063\u3066\u3044\u307E\u3059\u3002\n\n\u4F8B\u3048\u3070\u3001\u30AD\u30FC `a` (\u30AD\u30FC\u30B3\u30FC\u30C9: 65)\u304C\u62BC\u3055\u308C\u3066\u3044\u308B\u9593\u3001 `texture2D(key, vec2(65. / 256.)).r` \u306F `1.0` \u3068\u306A\u308A\u307E\u3059\u3002\n\n\u8A73\u3057\u304F\u306F [examples](https://github.com/fand/veda/blob/master/examples/key.frag) \u3092\u3054\u89A7\u304F\u3060\u3055\u3044\u3002\n")},shader:{attach:function(a){a.setFrameskip(2),a.toggleKeyboard(!0),a.loadTexture("font","/static/images/font.png"),a.loadFragmentShader("/*{\n  \"keyboard\": true,\n  \"IMPORTED\": {\n    \"font\": { \"PATH\": \"./images/font.png\" },\n  }\n}*/\nprecision mediump float;\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D key;\nuniform sampler2D font;\nuniform sampler2D backbuffer;\n\nfloat random(in vec2 p) {\n  return fract(sin(dot(p, vec2(5395.3242, 38249.2348))) * 248.24);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution;\n\n    vec2 uv2 = (uv - .5) * 2. + .5;\n    uv2 = clamp(uv2, 0., 1.);\n\n    // Background\n    gl_FragColor = vec4(\n      noise(uv * 2.23 + vec2(.7, 0) * sin(time * .39 + 1.)),\n      noise(uv * 2.27 + vec2(.8, 0) * sin(time * .37 + 3.)),\n      noise(uv * 2.21 + vec2(.9, 0) * sin(time * .49 + 8.)),\n      1.\n    ) * .05;\n\n    // Characters\n    float code = 0.;\n\n    if (texture2D(key, vec2(65. / 256.)).r > .0) { code = 65.; }\n    if (texture2D(key, vec2(66. / 256.)).r > .0) { code = 66.; }\n    if (texture2D(key, vec2(67. / 256.)).r > .0) { code = 67.; }\n    if (texture2D(key, vec2(68. / 256.)).r > .0) { code = 68.; }\n    if (texture2D(key, vec2(69. / 256.)).r > .0) { code = 69.; }\n    if (texture2D(key, vec2(70. / 256.)).r > .0) { code = 70.; }\n    if (texture2D(key, vec2(71. / 256.)).r > .0) { code = 71.; }\n    if (texture2D(key, vec2(72. / 256.)).r > .0) { code = 72.; }\n    if (texture2D(key, vec2(73. / 256.)).r > .0) { code = 73.; }\n    if (texture2D(key, vec2(74. / 256.)).r > .0) { code = 74.; }\n    if (texture2D(key, vec2(75. / 256.)).r > .0) { code = 75.; }\n    if (texture2D(key, vec2(76. / 256.)).r > .0) { code = 76.; }\n    if (texture2D(key, vec2(77. / 256.)).r > .0) { code = 77.; }\n    if (texture2D(key, vec2(78. / 256.)).r > .0) { code = 78.; }\n    if (texture2D(key, vec2(79. / 256.)).r > .0) { code = 79.; }\n    if (texture2D(key, vec2(80. / 256.)).r > .0) { code = 80.; }\n    if (texture2D(key, vec2(81. / 256.)).r > .0) { code = 81.; }\n    if (texture2D(key, vec2(82. / 256.)).r > .0) { code = 82.; }\n    if (texture2D(key, vec2(83. / 256.)).r > .0) { code = 83.; }\n    if (texture2D(key, vec2(84. / 256.)).r > .0) { code = 84.; }\n    if (texture2D(key, vec2(85. / 256.)).r > .0) { code = 85.; }\n    if (texture2D(key, vec2(86. / 256.)).r > .0) { code = 86.; }\n    if (texture2D(key, vec2(87. / 256.)).r > .0) { code = 87.; }\n    if (texture2D(key, vec2(88. / 256.)).r > .0) { code = 88.; }\n    if (texture2D(key, vec2(89. / 256.)).r > .0) { code = 89.; }\n\n    float x = mod(code, 16.) / 16.;\n    float y = 1. - ((floor(code / 16.) + 1.) / 16.);\n    gl_FragColor += vec4(texture2D(font, vec2(x, y) + uv2 / 16.).r) * clamp(code, 0., 1.) * noise(uv2 * 3. + time * 2.);\n\n    // Melting\n    gl_FragColor += vec4(\n      texture2D(backbuffer, uv + vec2(0, .003) * (1. + noise(uv * 13. + time) * 2.)).r,\n      texture2D(backbuffer, uv + vec2(0, .003) * (1. + noise(uv * 17. + time) * 2.)).g,\n      texture2D(backbuffer, uv + vec2(0, .003) * (1. + noise(uv * 11. + time) * 2.)).b,\n      1.\n    ) * .96;\n}\n")},detach:function(a){a.toggleKeyboard(!1),a.unloadTexture("font","/static/images/font.png")}}})})}},[314]);return{page:a.default}});